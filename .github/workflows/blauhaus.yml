name: Blauhaus Packages
on:
  push:
    branches:
    - release/*

jobs:
  
  build_windows:
     runs-on: windows-latest
     env:
       VersionName: ${GITHUB_REF##*/}
       SolutionPath: ./src/Blauhaus.DeviceServices.sln
       Configuration: 'Release_Xamarin'
     steps:
     - name: Environment
       run: |
        echo ${env:Configuration}
        echo ${env:SolutionPath}  
        echo ${env:VersionName}
     - uses: actions/checkout@v2
     - uses: microsoft/setup-msbuild@v1.0.2
     - uses: actions/setup-dotnet@v1
       with:
         dotnet-version: '7.0.x'
         include-prerelease: true
     - name: Install MAUI Workloads
       run: |
        dotnet workload install maui --ignore-failed-sources 
     - name: MS Build
       run: msbuild /m /p:Configuration={Configuration} /t:restore /p:Version=${VersionName} ${SolutionPath}
     - name: Deploy NuGet Package
       run: |
         dotnet nuget push "**/*.nupkg" -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json

  build_macos:
     runs-on: macos-latest
     env:
       VersionName: ${GITHUB_REF##*/}
       SolutionPath: ./src/Blauhaus.DeviceServices.sln
       Configuration: 'Release'
     steps:
     - name: Environment
       run: |
        echo $Configuration  
        echo $SolutionPath  
        echo $VersionName  
     - uses: actions/checkout@v2
     - uses: actions/setup-dotnet@v1
       with:
         dotnet-version: '7.0.x'
         include-prerelease: true
     - name: Install MAUI Workloads
       run: |
        dotnet workload install maui --ignore-failed-sources  
     - name: Build NuGet Package
       run: |
        dotnet build ${SolutionPath} --configuration ${Configuration}-p:Version=${VersionName}
        
     - name: Deploy NuGet Package
       run: |
         dotnet nuget push "**/*.nupkg" -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
  


  #build_windows:
  #   runs-on: windows-latest
  #   env:
  #     VersionName: ${GITHUB_REF##*/}
  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: actions/setup-dotnet@v1
  #     with:
  #       dotnet-version: '7.0.x'
  #       include-prerelease: true 
  #   - name: Install MAUI Workloads
  #     run: |
  #      dotnet workload install maui --ignore-failed-sources
  #   - name: Restore NuGet packages
  #     run: nuget restore ./src/Blauhaus.Push.sln
  #   - name: Add MSBuild to PATH
  #     uses: microsoft/setup-msbuild@v1.0.2
  #   - name: MS Build
  #     run: msbuild /m /p:Configuration=Release_Xamarin ./src/Blauhaus.Push.sln
  #   - name: Build NuGet Package
  #     run: |
  #      dotnet pack ./src/Blauhaus.Push.Abstractions/Blauhaus.Push.Abstractions.csproj -p:PackageVersion=$VersionName --no-build --output ./ --configuration Release 
  #      dotnet pack ./src/Blauhaus.Push.Client/Blauhaus.Push.Client.csproj -p:PackageVersion=$VersionName --no-build --output ./ --configuration Release 
  #      dotnet pack ./src/Blauhaus.Push.Client.Xamarin/Blauhaus.Push.Client.Xamarin.csproj -p:PackageVersion=$VersionName --no-build --output ./ --configuration Release 
  #   - name: Deploy NuGet Package
  #     run:  |
  #      dotnet nuget push /Users/runner/work/Blauhaus.Push/Blauhaus.Push/Blauhaus.Push.Client.Xamarin.$VersionName.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json

  #build_main:
  #   runs-on: macos-latest
  #   env:
  #     VersionName: ${GITHUB_REF##*/}
  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: actions/setup-dotnet@v1
  #     with:
  #       dotnet-version: '7.0.x'
  #       include-prerelease: true
  #   - name: Install MAUI Workloads
  #     run: |
  #      dotnet workload install maui --ignore-failed-sources
  #   - name: Set Version
  #     run: |
  #      npm install @actions/core --save
  #      node ./scripts/getversion.js
  #   - name: Restore NuGet packages
  #     run: nuget restore ./src/Blauhaus.Push.sln
  #   - name: MS Build
  #     run: dotnet build ./src/Blauhaus.Push.sln -c Release 
  #   - name: Build NuGet Package
  #     run: |
  #      dotnet pack ./src/Blauhaus.Push.Abstractions/Blauhaus.Push.Abstractions.csproj -p:PackageVersion=$VersionName --no-build --output ./ --configuration Release 
  #      dotnet pack ./src/Blauhaus.Push.Client/Blauhaus.Push.Client.csproj -p:PackageVersion=$VersionName --no-build --output ./ --configuration Release 
  #      dotnet pack ./src/Blauhaus.Push.Server/Blauhaus.Push.Server.csproj -p:PackageVersion=$VersionName --no-build --output ./ --configuration Release 
  #      dotnet pack ./src/Blauhaus.Push.Client.Maui/Blauhaus.Push.Client.Maui.csproj -p:PackageVersion=$VersionName --no-build --output ./ --configuration Release 
  #      dotnet pack ./src/Blauhaus.Push.TestHelpers/Blauhaus.Push.TestHelpers.csproj -p:PackageVersion=$VersionName --no-build --output ./ --configuration Release 
  #   - name: Deploy NuGet Package
  #     run:  |
  #      dotnet nuget push /Users/runner/work/Blauhaus.Push/Blauhaus.Push/Blauhaus.Push.Abstractions.$VersionName.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
  #      dotnet nuget push /Users/runner/work/Blauhaus.Push/Blauhaus.Push/Blauhaus.Push.Client.$VersionName.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
  #      dotnet nuget push /Users/runner/work/Blauhaus.Push/Blauhaus.Push/Blauhaus.Push.Client.Maui.$VersionName.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
  #      dotnet nuget push /Users/runner/work/Blauhaus.Push/Blauhaus.Push/Blauhaus.Push.Server.$VersionName.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
  #      dotnet nuget push /Users/runner/work/Blauhaus.Push/Blauhaus.Push/Blauhaus.Push.TestHelpers.$VersionName.nupkg -k ${{ secrets.NUGET_API_KEY }} -s https://api.nuget.org/v3/index.json
